# This starter workflow is for a CMake project running on multiple platforms.
# There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml

name: CMake on multiple platforms

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    steps:
      - uses: actions/checkout@v4

      - name: Set reusable strings
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. The build directory will be used to hold
        # the generated build files and the final output binary. Here, we pass the build type
        # and the chosen compilers for each job in the matrix.
        run: |
          mkdir -p ${{ github.workspace }}/build
          cd ${{ github.workspace }}/build
          cmake .. -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}

      - name: Build the project
        run: |
          cd ${{ github.workspace }}/build
          cmake --build . --config ${{ matrix.build_type }}

      - name: Run tests
        # If you have tests in your project, you can run them after building.
        # This assumes that CTest is available and tests are defined in your CMakeLists.txt
        run: |
          cd ${{ github.workspace }}/build
          ctest --output-on-failure

      - name: Upload build artifacts
        if: success()
        # Upload the build artifacts to GitHub Actions so you can download them later.
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: ${{ github.workspace }}/build
