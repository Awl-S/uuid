# This starter workflow is for a CMake project running on multiple platforms.
# There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml

name: CMake on multiple platforms

on:
  push:
    branches: [ "master" ]
    tags:
      - 'v*'  # Trigger on tags like v1.0.0
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    steps:
      - uses: actions/checkout@v4

      - name: Set reusable strings
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

      - name: Configure CMake
        run: |
          mkdir -p ${{ github.workspace }}/build
          cd ${{ github.workspace }}/build
          cmake .. -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}

      - name: Build the project
        run: |
          cd ${{ github.workspace }}/build
          cmake --build . --config ${{ matrix.build_type }}

      - name: Run tests
        run: |
          cd ${{ github.workspace }}/build
          # Run your tests here if you have them
          # Example:
          # ./test_program

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') # Only run on tags like v1.0.0

    steps:
      - uses: actions/checkout@v4

      - name: Set up GitHub CLI
        uses: cli/cli-action@v2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release
        run: |
          VERSION="${GITHUB_REF#refs/tags/}"  # Get the tag version
          gh release create "$VERSION" --notes "Release version $VERSION" --target $GITHUB_SHA
